// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rocket.Repositories;

namespace Rocket.Migrations
{
    [DbContext(typeof(RocketDbContext))]
    partial class RocketDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Rocket.Models.Bet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<int?>("ContestForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContestId1")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId1")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ContestForeignKey");

                    b.HasIndex("ContestId1");

                    b.HasIndex("UserForeignKey");

                    b.HasIndex("UserId1");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("Rocket.Models.Contest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalBetAmount")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("Rocket.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId1")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserForeignKey");

                    b.HasIndex("UserId1");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Rocket.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Rocket.Models.Bet", b =>
                {
                    b.HasOne("Rocket.Models.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestForeignKey");

                    b.HasOne("Rocket.Models.Contest", null)
                        .WithMany("Bets")
                        .HasForeignKey("ContestId1");

                    b.HasOne("Rocket.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserForeignKey");

                    b.HasOne("Rocket.Models.User", null)
                        .WithMany("Bets")
                        .HasForeignKey("UserId1");

                    b.Navigation("Contest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Rocket.Models.Transaction", b =>
                {
                    b.HasOne("Rocket.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserForeignKey");

                    b.HasOne("Rocket.Models.User", null)
                        .WithMany("Transactions")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Rocket.Models.Contest", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("Rocket.Models.User", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
